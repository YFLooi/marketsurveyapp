#Source: https://circleci.com/docs/2.0/deployment-examples/#heroku
version: 2.1 #allows CircleCI to point out version-specific errors

orbs:
    heroku: circleci/heroku@1.0.1 # Invoke the Heroku orb

workflows: #Defined set of rules for defining a collection of jobs and their run order
    build-and-test: #Condition for Github to accept push
        jobs:
          - build-test
    heroku_deploy:
        jobs:
            - build-test-deploy
            - heroku/deploy-via-git: # Use the pre-configured job, deploy-via-git
                requires:
                    - build-test-deploy
                filters:
                    branches:
                        only: sequential-branch-filter

#github requires both 'build-and-test' and 'build' run before approving pull requests...
jobs:
    build-test: #This exists just to pass commit to Github. Workflow must have min 1 test to pass CircleC
        working_directory: ~/marketsurveyapp # name of root directory where steps will run
        docker: #steps to run with Docker
            - image: circleci/node:13.12.0-stretch # This image as the primary container; this is where all `steps` will run   
        steps: #collection of executable commands.
            - checkout #check out source code to working directory
            - run: 
                name: Install Express packages  #literally the name of this step. Useful to indicate point in build
                command: cd web && npm install 
            - run: #Required to run tests
                name: Install React app packages  
                command: cd web && cd client && npm install 
            - run: 
                name: Run tests
                command: cd web && cd client && npm test
    build-test-deploy: 
        working_directory: ~/marketsurveyapp # name of root directory where steps will run
        docker: #steps to run with Docker
            - image: circleci/node:13.12.0-stretch # This image as the primary container; this is where all `steps` will run   
        steps: #collection of executable commands.
            - checkout #check out source code to working directory
            - run: 
                name: Install Express server packages  #literally the name of this step. Useful to indicate point in build
                command: cd web && npm install 
            - run: #Required to run tests
                name: Install React app packages  
                command: cd web && cd client && npm install 
            - run: 
                name: Run tests
                command: cd web && cd client && npm test
            - setup_remote_docker #Removes need for Docker daemon. Prevents error on CircleCI build process: Cannot connect to the Docker daemon at unix:///var
            - deploy: # From https://medium.com/nexton/deploying-docker-images-to-heroku-with-circleci-713c764e248d
                name: Setup Heroku to receive push
                #"sudo curl ~~install.sh" installs Heroku cli
                #"heroku stack:set container" sets stack of Heroku app to container
                #"heroku container:push" looks for the Dockerfiles.processType from the root folder to build images of them
                #"-q" is a quiet push. No token of it will be shown in log
                command: |
                    sudo curl https://cli-assets.heroku.com/install.sh | sh 
                    HEROKU_API_KEY=${HEROKU_TOKEN} heroku login
                    HEROKU_API_KEY=${HEROKU_TOKEN} heroku container:login
                    HEROKU_API_KEY=${HEROKU_TOKEN} heroku stack:set container -a marketsurveyapp  
                    HEROKU_API_KEY=${HEROKU_TOKEN} git config credential.helper 'cache --timeout=120'
                    HEROKU_API_KEY=${HEROKU_TOKEN} git config user.email "yihfoo@gmail.com"
                    HEROKU_API_KEY=${HEROKU_TOKEN} git config user.name "yihfoolooi"
                    HEROKU_API_KEY=${HEROKU_TOKEN} git config user.password ${HEROKU_TOKEN}
                    HEROKU_API_KEY=${HEROKU_TOKEN} heroku git:remote -a marketsurveyapp 
                    HEROKU_API_KEY=${HEROKU_TOKEN} git push heroku master                    
                
