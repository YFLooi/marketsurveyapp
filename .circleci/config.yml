#Source: https://circleci.com/docs/2.0/deployment-examples/#heroku
version: 2.1 #allows CircleCI to point out version-specific errors

orbs:
  heroku: circleci/heroku@1.0.1 # Invoke the Heroku orb

workflows: #Defined set of rules for defining a collection of jobs and their run order
    build-and-test: #Condition for Github to accept push
        jobs:
            - build-and-test
    heroku_deploy:
        jobs:
            - build-and-test
            - heroku/deploy-via-git: # Use the pre-configured job, deploy-via-git
                requires:
                    - build-and-test
                filters:
                    branches:
                        only: sequential-branch-filter

#github requires both 'build-and-test' and 'build' run before approving pull requests...
jobs:
    build-and-test: #runs with all workflows
        working_directory: ~/marketsurveyapp # name of root directory where steps will run
        docker: #steps to run with Docker
            - image: circleci/node:9.9.0 # This image as the primary container; this is where all `steps` will run
            - image: circleci/postgres:9.6.5-alpine # and this image is the secondary service container
              environment:
                POSTGRES_USER: HEROKU_POSTGRES_USER
                POSTGRES_DB: HEROKU_POSTGRES_DB
        
        environment: # environment variables for the build itself
            TEST_RESULTS: /tmp/test-results # path to where test results will be saved
                
        steps: #collection of executable commands.
            - checkout #check out source code to working directory
            - run: mkdir -p $TEST_RESULTS # create the test results directory
            - run: 
                name: Install packages #literally the name of this step. Useful to indicate point in build
                command: npm install 
            - run: #install dockerize to wait for dependencies to load
                name: install dockerize
                command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
                environment:
                  DOCKERIZE_VERSION: v0.3.0
            - run: #use dockerize to wait for psql to be ready
                name: Wait for db
                command: dockerize -wait tcp://localhost:5432 -timeout 1m
            - run: 
                name: Run tests
                command: npm test
            - setup_remote_docker #Removes need for Docker daemon. Prevents error on CircleCI build process: Cannot connect to the Docker daemon at unix:///var
            - run: # From https://medium.com/nexton/deploying-docker-images-to-heroku-with-circleci-713c764e248d
                name: Build and push Docker image to Heroku
                command: |
                    sudo curl https://cli-assets.heroku.com/install.sh | sh #installs heroku cli
                    HEROKU_API_KEY=${HEROKU_TOKEN} heroku stack:set container -a marketsurveyapp #Sets stack of Heroku app to container
                    HEROKU_API_KEY=${HEROKU_TOKEN} heroku container:login 
                    HEROKU_API_KEY=${HEROKU_TOKEN} heroku container:push -a marketsurveyapp web
                    HEROKU_API_KEY=${HEROKU_TOKEN} heroku container:release -a marketsurveyapp web

