import React, { Component, useState, useEffect } from 'react';
import AliceCarousel from 'react-alice-carousel';
import "react-alice-carousel/lib/alice-carousel.css";
import "./Carousel.css";
import { Grid, Card, CardHeader, CardActionArea, CardActions, CardContent, CardMedia, Typography, Button } from "@material-ui/core/";

import { makeStyles} from '@material-ui/core/styles';
const useStyles = makeStyles(theme => ({
    example: {
        display: "none"
    },
}));

//Do not attempt to style with Material UI's withStyle(). It weirds out handleOnSlideChange()
function Carousel (props) {    
    const classes = useStyles();

    const [renderData, setRenderData] = useState([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [itemsInSlide, setItemsInSlide] = useState(1);
    const [responsive, setResponsive] = useState({ 0: { items: 2 }, 1024: { items: 2 }, }); //Property value = window.innerWidth
    const [galleryItems, setGalleryItems] = useState([]);

    useEffect(() => {    
        //Runs on componentDidMount()
        setRenderData([...renderData, ...props.renderData]);
        
        //Send data directly to rendering function. This skips delay from use of state for storage
        generateGalleryItems(props.renderData);

        //Identifies viewport size
        //Component is remounted each time the window is resized. That's why this works in detecting viewport size!
        //window.addEventListener('resize', updateWindowDimensions);
        //updateWindowDimensions();
        
        return () => {      
            //Each time the window is resized, the DOM is re-rendered. This ensures event listeners do NOT stack up
            window.removeEventListener('resize', updateWindowDimensions);

            document.getElementsByClassName("CarouselPlaceholder")[0].style.display = "flex";  
        }; 
    }, []);
    const updateWindowDimensions = () => {
        //Sets number of items to display on carousel by screen size
        let cardsToShow = Math.round(window.innerWidth/210); //Need to round else cards partially shown
        setResponsive({ responsive: { 0: { items: cardsToShow }} });
        console.log('New viewport dimensions: Width: '+window.innerWidth+' Height: '+ window.innerHeight)
    }
    const generateGalleryItems = (data) => {  //Every item to insert into slide
        //Array generated by this array constructor will have a length = data.length
        console.log(data);
        let itemsArray = Array(data.length).fill().map((item, i) => 
           <div className="card" key={i} onDragStart={handleOnDragStart}>
               {data[i].surveyId}<br/>
               {data[i].title}<br/>
               {data[i].issuer}<br/>
               {data[i].dateIssued}<br/>
           </div>
            
            /** 
            <Grid item key={`survey card ${i}`} onDragStart={handleOnDragStart}>
                <Card classes={{root: classes.card}}>
                    <CardActionArea>
                        <CardMedia
                            component="img"
                            alt={`survey card title`}
                            height="210"
                            src={data.coverImg}
                            classes= {{media: classes.cardImage}}
                            onClick={() => {props.renderDetailsCard(data.surveyId);}}
                        />
                        <CardContent>
                            <Typography variant="body1" component="h2" noWrap={false}>
                                <b>{data.title}</b>
                            </Typography>
                            <Typography variant="body1" component="div" noWrap={true}>
                                {data.issuer}
                            </Typography>
                        </CardContent>
                    </CardActionArea>
                    <CardActions>
                        <Button size="small" color="primary" onClick={() => {props.renderDetailsCard(data.surveyId);}}>
                            Details
                        </Button>
                    </CardActions>
                </Card>
            </Grid>
            */
        )

        //For retrieval later to generate 'Details' overlay
        setGalleryItems([...itemsArray])
        document.getElementsByClassName("CarouselPlaceholder")[0].style.display = "none";
    }
    const slidePrevPage = () => {
        const newCurrentIndex = currentIndex - itemsInSlide;
        setCurrentIndex(newCurrentIndex);
    }
    const slideNextPage = () => {
        let newCurrentIndex = currentIndex + itemsInSlide
        const currentGalleryItems = galleryItems;
        if (newCurrentIndex > currentGalleryItems.length) {
            setCurrentIndex(newCurrentIndex);
        }
    }
    const handleOnSlideChange = (event) => {
        const { itemsInSlide, item } = event
        setItemsInSlide(itemsInSlide);
        setCurrentIndex(item);
    }
    //Handles drag event independently to avoid odd behaviour
    const handleOnDragStart = (event)=> {
        event.preventDefault()
    }       

    return (
        <div className="Carousel"> 
            <div className="CarouselPlaceholder">
                <Typography variant="h6" align="center">Loading</Typography>
            </div>

            <div className="CarouselBody">
                
                
                {/*className of output div is "alice-carousel"

                <div className='prevButtonContainer' onClick={slidePrevPage}></div>
                <AliceCarousel
                    items={galleryItems}
                    slideToIndex={currentIndex}
                    onInitialized={handleOnSlideChange}
                    onSlideChanged={handleOnSlideChange}
                    onResized={handleOnSlideChange}
                    buttonsDisabled = {true}
                    mouseTrackingEnabled
                    keysControlDisabled = {false}
                />
                <div className='nextButtonContainer' onClick={slideNextPage}></div>
                */}
                
                <AliceCarousel mouseTrackingEnabled items={galleryItems}>
                </AliceCarousel>
            
                {/*Using divs as button provide better customisation*/}
                
            </div>
        </div> 
    ) 
}

export default Carousel;